"use strict";
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require("react");

var tile = {
  render: function render() {
    var bar = undefined;
    if (this.props.bar !== false) {
      bar = React.createElement(
        "div",
        { style: { background: this.props.barBackground, color: this.props.barColor } },
        React.createElement(
          TextCell,
          this.props,
          this.props.bar
        )
      );
    }

    return React.createElement(
      "div",
      null,
      React.createElement(
        SquareBox,
        _extends({}, this.props, { size: this.props.width }),
        this.props.children
      ),
      bar
    );
  }
};

var squarebox = {
  propTypes: {
    size: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
    color: React.PropTypes.string,
    lineHeight: React.PropTypes.string,
    bg: React.PropTypes.element,
    backgroundColor: React.PropTypes.string,
    backgroundSize: React.PropTypes.string,
    fontSize: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]),
    fontFamily: React.PropTypes.string,
    backgroundImage: React.PropTypes.string
  },
  getDefaultProps: function getDefaultProps() {
    return {
      size: "100%",
      color: "white",
      backgroundSize: "cover",
      fontFamily: "inherit",
      fontSize: 10,
      lineHeight: "1.5"
    };
  },
  render: function render() {
    var style = {
      position: "relative",
      color: this.props.color,
      width: this.props.size,
      fontSize: "" + this.props.fontSize + "px",
      fontFamily: this.props.fontFamily,
      height: 0,
      paddingBottom: "100%",
      overflow: "hidden",
      lineHeight: this.props.lineHeight
    };

    var children = [];
    var bgStyle = {
      zIndex: "-1",
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      width: "100%",
      height: "100%",
      overflow: "hidden",
      backgroundColor: this.props.backgroundColor,
      backgroundSize: this.props.backgroundSize,
      backgroundImage: this.props.backgroundImage
    };

    children.push(React.createElement(
      "div",
      { key: "background", style: bgStyle },
      this.props.bg || ""
    ));

    var contentStyle = {
      padding: "10px",
      boxSizing: "border-box",
      width: "100%"
    };

    children.push(React.createElement(
      "div",
      { key: "content", style: contentStyle },
      this.props.children
    ));

    return React.createElement(
      "div",
      { style: style },
      children
    );
  }
};

var textcell = {
  propTypes: {
    truncating: React.PropTypes.bool
  },
  getDefaultProps: function getDefaultProps() {
    return {
      truncating: true
    };
  },
  render: function render() {
    var style = {
      width: "100%",
      overflow: "hidden",
      height: "40px",
      fontSize: "11pt",
      padding: "0 10px",
      display: "block",
      whiteSpace: "nowrap",
      boxSizing: "border-box"
    };
    style.lineHeight = style.height;

    if (this.props.truncating) {
      style.textOverflow = "ellipsis";
    }

    return React.createElement(
      "div",
      { style: style },
      this.props.children || ""
    );
  }
};

exports.textcell = textcell;
var TextCell = exports.TextCell = React.createClass(textcell);
exports.squarebox = squarebox;
var SquareBox = exports.SquareBox = React.createClass(squarebox);
exports.tile = tile;
var Tile = exports.Tile = React.createClass(tile);
Object.defineProperty(exports, "__esModule", {
  value: true
});

